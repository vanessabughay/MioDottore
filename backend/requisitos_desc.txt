Perfis de Acesso
Paciente: acessa consultas, agendamentos e histórico de pontos.
Funcionário: cadastra consultas, confirma presença e realiza procedimentos.
Requisitos Funcionais
R01: Autocadastro de Paciente – Cadastro com CPF, nome, e-mail, CEP, senha (4 dígitos aleatórios via e-mail). Endereço preenchido via ViaCEP. Início com 0 pontos.
oPermite que pacientes se cadastrem no sistema informando CPF, nome, e-mail e CEP. O endereço completo é preenchido automaticamente por meio da API ViaCEP. O paciente inicia com 0 pontos e recebe por e-mail uma senha numérica gerada aleatoriamente.
R02: Login/Logout – Autenticação via e-mail e senha com token JWT.
oUsuários acessam o sistema com seu e-mail e senha. Após validação, é gerado um token JWT que será usado para autenticação nas demais requisições. Todas as funcionalidades subsequentes exigem autenticação válida.
Perfil Paciente
R03: Tela Inicial do Paciente – Menu com saldo de pontos e agendamentos (futuros, realizados, cancelados).
oApresenta um menu com as opções disponíveis para o paciente. Exibe também o saldo atual de pontos e uma tabela com os agendamentos realizados, futuros ou cancelados. Permite visualização rápida e organizada do histórico de atendimentos.
R04: Compra de Pontos – 1 ponto = R$ 5,00. Transações com registro de data/hora e descrição "COMPRA DE PONTOS".
oO paciente pode adquirir pontos para obter descontos em consultas. Cada ponto custa R$ 5,00. As compras são registradas em um histórico de transações, com data/hora, valor em reais, quantidade de pontos e a descrição “COMPRA DE PONTOS”.
R05: Agendar Consulta – Busca por especialidade e médico. Seleciona consulta, usa pontos para desconto, confirma pagamento. Código único de agendamento gerado. Status: CRIADO.
oO paciente busca consultas disponíveis por especialidade e/ou profissional. Ao selecionar uma consulta, define quantos pontos usará para obter desconto, e o restante é pago em dinheiro. Após confirmação, o sistema registra o agendamento com um código único e status CRIADO.
R06: Cancelar Agendamento – Permitido apenas se CRIADO ou CHECK-IN. Pontos devolvidos com histórico registrado.
oPermite ao paciente cancelar agendamentos com status CRIADO ou CHECK-IN. Os pontos utilizados são devolvidos ao saldo, e o histórico registra a transação com a descrição “CANCELAMENTO DE AGENDAMENTO”.
R07: Check-in – Disponível para consultas nas próximas 48h. Status muda para CHECK-IN.
oNas 48 horas anteriores à consulta, o paciente pode realizar o check-in, indicando que comparecerá. Isso atualiza o status do agendamento para CHECK-IN, permitindo que o funcionário confirme sua presença posteriormente.
Perfil Funcionário
R08: Tela Inicial do Funcionário – Lista consultas nas próximas 48h com botões para confirmar presença (R09), cancelar (R10) ou realizar (R11).
oMostra as consultas que ocorrerão nas próximas 48 horas, com ações disponíveis para cada uma: confirmar comparecimento, cancelar ou registrar como realizada.
R09: Confirmar Comparecimento – Mediante código e status CHECK-IN. Altera para COMPARECEU.
oO funcionário digita o código do agendamento para confirmar a presença do paciente. O agendamento deve estar no estado CHECK-IN. Após confirmação, o status é alterado para COMPARECEU.
R10: Cancelar Consulta – Só possível se menos de 50% dos agendamentos estiverem confirmados. Status: CANCELADA. Agendamentos vinculados também são cancelados.
oPermite ao funcionário cancelar uma consulta caso menos de 50% das vagas estejam ocupadas. Isso atualiza o status da consulta e de todos os agendamentos vinculados para CANCELADO, e os pontos são devolvidos aos pacientes.
R11: Realizar Consulta – Marca consulta como REALIZADA. Quem não compareceu recebe status FALTOU.
oAo término da consulta, o funcionário marca a consulta como REALIZADA. Agendamentos no estado COMPARECEU passam a REALIZADO; os demais (sem check-in ou confirmação) são marcados como FALTOU.
R12: Cadastro de Consulta – Data/hora, especialidade, médico, valor, vagas. Código gerado automaticamente. Status: DISPONÍVEL.
oO funcionário pode cadastrar novas consultas, informando data/hora, médico responsável, especialidade, valor da consulta e número de vagas. O sistema gera um código único para cada consulta, que inicia com o status DISPONÍVEL.
R13-R15: CRUD de Funcionário – Inserção, alteração (exceto CPF) e inativação (não exclusão).
oPermite o cadastro de novos funcionários, com nome, CPF, e-mail e telefone. A senha é enviada por e-mail, gerada automaticamente. O CPF é único e o e-mail será utilizado para login.
oPermite atualizar os dados do funcionário, com exceção do CPF. Essa funcionalidade facilita a manutenção das informações sem perder a identificação original.
oAo excluir um funcionário, seus dados não são apagados do sistema, apenas marcados como inativos. Isso preserva o histórico de operações realizadas pelo profissional.
Requisitos Não Funcionais do Projeto
Estrutura por Microsserviço
1. API Gateway
O API Gateway é o ponto de entrada para todas as requisições feitas ao sistema. Em vez de o front-end se comunicar diretamente com cada microsserviço, ele envia todas as requisições ao Gateway, que redireciona essas chamadas ao serviço apropriado. Isso centraliza o controle de acesso, autenticação e roteamento.
Principais funções:
Roteamento inteligente: encaminha as requisições HTTP para o microsserviço correspondente com base na URL.
Autenticação com JWT: valida o token JWT enviado no cabeçalho da requisição (Authorization: Bearer ...) para permitir ou negar o acesso.
Middleware de segurança: protege rotas, verifica o tipo de usuário (paciente ou funcionário) e impede acesso indevido.
Abstração da arquitetura interna: o front-end não precisa conhecer a estrutura dos microsserviços — apenas interage com uma única API.
2. MS Autenticação
O Microsserviço de Autenticação é responsável pela criação de contas e autenticação de usuários. Ele fornece os mecanismos necessários para login seguro e emissão de tokens JWT para sessões válidas.
Principais responsabilidades:
Cadastro de usuário: armazena nome, CPF, e-mail, senha (criptografada) e tipo de usuário (PACIENTE ou FUNCIONÁRIO).
Login com JWT: valida credenciais e gera token com as informações do usuário.
Persistência no PostgreSQL: armazena os dados em um banco específico, sem compartilhamento com outros serviços.
Envio de senha inicial: no caso de autocadastro, uma senha numérica aleatória é enviada ao e-mail do usuário.
3. MS Paciente
O Microsserviço de Paciente trata dos dados cadastrais dos pacientes e do sistema de pontos, utilizado como benefício na compra de consultas.
Principais responsabilidades:
Dados pessoais: CPF, nome, endereço completo, e-mail e saldo de pontos.
Compra de pontos: registra cada compra de pontos feita pelo paciente com valor em R$ e quantidade de pontos adquiridos.
Histórico de transações: mantém um extrato com todas as movimentações de pontos (entrada/saída), incluindo origem (compra, uso em consulta, cancelamento).
Consulta de saldo: exibe saldo atual e histórico tabular com descrição, tipo (ENTRADA/SAÍDA), data e valor.
4. MS Consulta/Agendamento
Esse Microsserviço é o núcleo funcional do sistema, responsável por permitir o cadastro, busca e gerenciamento das consultas oferecidas e das interações dos pacientes com elas.
Principais responsabilidades:
Cadastro de consulta: permite que funcionários registrem novas consultas informando especialidade, médico, data/hora, valor e número de vagas. A consulta começa no estado DISPONÍVEL.
Busca por consulta: pacientes podem filtrar por especialidade ou médico e visualizar as opções futuras.
Agendamento: o paciente agenda uma consulta, utilizando pontos e, se necessário, complementando com pagamento em dinheiro. O agendamento é salvo com status CRIADO e recebe um código único.
Check-in do paciente: se a consulta ocorrer em até 48h, o paciente pode registrar sua presença com antecedência (CHECK-IN).
Confirmar comparecimento: o funcionário confirma o comparecimento do paciente, mudando o estado para COMPARECEU.
Realização da consulta: ao final, o funcionário registra a consulta como REALIZADA e atualiza o status dos pacientes para REALIZADO ou FALTOU.
Cancelamento: o paciente pode cancelar o agendamento (com retorno dos pontos), ou o funcionário pode cancelar a consulta caso não haja ao menos 50% das vagas preenchidas.


























NORMAS PARA DEFESA

Diretrizes:
 
A defesa deve demorar uns 20 min por equipe.
Vocês devem trazer suas máquinas para rodar a aplicação.
No momento da defesa tudo deve estar no ar: Front, Back, BD, Containers, etc.
No momento da defesa o projeto de teste deve estar instalado e será executado na hora
Não serão aceitos projetos sem integração Front x Back, ou rodando com LocalStorage/json-server.
Não serão aceitos projetos "rodando" somente no Postman.
Não serão aceitos projetos sem a implementação dos microsserviços solicitados.

REQUISITOS PARA ENTREGA/DEFESA (Sem isso não há defesa)
Aplicação de Teste instalada e executando. Ela será executada na hora da defesa;
Front-end implementado em Angular/React/Vue+Typescript e back-end em Spring Boot (Java ou Kotlin);
Sistemas usando arquitetura de microsserviços;
Front-end acessando somente o API Gateway via HTTP-REST;
Não usar Local Storage nem json-server para armazenar as informações do sistema;
Usar banco de dados distintos por microsserviço (ou schema-per-service);
Todos os requisitos implementados corretamente e de forma completa (arquitetura de MS solicitada etc.);
API Gateway básico implementado;
Sistemas devem possuir interface muito bem elaborada. (Não será permitida a entrega de sistemas em HTML puro ou com interface ruim).

O QUE DEVE SER ENTREGUE
Deve ser entregue em arquivo ZIP:
Todos os fontes do projeto;
Scripts de inicialização do banco de dados (criação e inserções);
Scripts para construção das imagens e execução do projeto;
Link para UM vídeo no Youtube (não listado) onde são mostrados os requisitos funcionais.
!!!!! Cuidado para remover arquivos inúteis (executáveis, bibliotecas, diretório node_modules) antes da compactação <= VOU DESCONTAR DE QUEM ENTREGAR NODE_MODULES e ARQUIVOS COMPILADOS)

SOBRE O VÍDEO COM OS REQUISITOS FUNCIONAIS
Link para um Vídeo contendo a apresentação de todos os requisitos funcionais implementados.
No vídeo deve aparecer - de forma clara - a identificação do requisito (Número e nome, conforme a especificação do trabalho) que está sendo testado e o teste efetivo de todos os aspectos do requisito.
O vídeo deve ter, no máximo, 20 minutos de duração.
Não há necessidade de todos os integrantes da equipe participarem do vídeo.
Só devem ser mostrados os requisitos funcionais que estão implementados integralmente (front-end e back-end).
Mantenha o banco de dados aberto para mostrar que o requisito funcionou, como uma evidência do teste.

SOBRE A DEFESA DOS NÃO-FUNCIONAIS
Defesa dos requisitos não-funcionais.
O sistema deve estar funcionando, todos os contêineres carregados.
Todos os fontes devem estar disponibilizados, bem como banco de dados e scripts.
O projeto de Testes deve estar instalado e funcionando.
Ele será executado na hora da defesa.
A nota será individual, por aluno, que deverá responder aos questionamentos do professor, bem como demonstrar fluência no código para explicá-lo, alterá-lo ou criar funcionalidades novas, no momento da defesa.
Cada aluno deve:
oExplicar trechos do código
oJustificar decisões técnicas
oRealizar ajustes se solicitado

Não serão aceitos:
Uso de json-server, LocalStorage ou sistemas com dados estáticos
Projetos rodando apenas no Postman
Sistemas sem integração completa entre front-end e microsserviços
Projetos sem autenticação JWT funcional

